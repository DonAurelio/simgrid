# Copyright (c) 2014-2022. The SimGrid Team. All rights reserved.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the license (GNU LGPL) which comes with this package.

# The simcalls are given as C-like signatures (one per line):
#
# int foo(int x, int y);
# int foo(int x, int y) [[block]];
# int foo(int x, int y) [[nohandler]];
# int foo(int x, int y) [[block, nohandler]];
#
# The `block` attribute is used for calls which do not return in the same
# scheduling round. The answer requires some interaction with SURF,
# even if this can still occur at the same timestamp under some
# circumstances (eg if the surf_action cannot start because of resources
# that are down) examples: things that last some time (communicate, execute,
# mutex_lock).
#
# The `nohandler` is used to disable handlers.
# I wish we could completely remove the handlers as their only use is
# to adapt the interface between the exported symbol that is visible
# by the user applications and the internal symbol that is implemented
# by the kernel.
# The only remaining use of that mechanism is to add the caller
# identity as a parameter of internal call, but that could be
# automated too (eg by having a special parameter type called "self")

# Please note that in addition to completing this file with your new simcall,
# you should complete the libsmx.c file by adding the corresponding function
# (a.k.a. stub). Anyway, if you omit to do it, the invocation of ./simcalls.py will notify you ;)
# If you want to remove an handler, it is important to remove although
# the corresponding code (simcall_HANDLER_name_of_simcall(xxx) (note that comment the code
# is not sufficient, the python script does not check whether the code is commented or not).
# Last but not the least, you should declare the new simix call in
# ./include/simgrid/simix.h (otherwise you will get a warning at compile time)

void       run_kernel(std::function<void()> const* code) [[nohandler]];
void       run_blocking(std::function<void()> const* code) [[block,nohandler]];
