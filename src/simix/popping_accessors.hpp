/**********************************************************************/
/* File generated by src/simix/simcalls.py from src/simix/simcalls.in */
/*                                                                    */
/*                    DO NOT EVER CHANGE THIS FILE                    */
/*                                                                    */
/* change simcalls specification in src/simix/simcalls.in             */
/* Copyright (c) 2014-2022. The SimGrid Team. All rights reserved.    */
/**********************************************************************/

/*
 * Note that the name comes from http://en.wikipedia.org/wiki/Popping
 * Indeed, the control flow is doing a strange dance in there.
 *
 * That's not about http://en.wikipedia.org/wiki/Poop, despite the odor :)
 */

#include "src/simix/popping_private.hpp"
static inline std::function<void()> const* simcall_run_kernel__get__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<std::function<void()> const*>(simcall->args_[0]);
}
static inline std::function<void()> const* simcall_run_kernel__getraw__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<std::function<void()> const*>(simcall->args_[0]);
}
static inline void simcall_run_kernel__set__code(smx_simcall_t simcall, std::function<void()> const* arg)
{
  simgrid::simix::marshal<std::function<void()> const*>(simcall->args_[0], arg);
}

static inline std::function<void()> const* simcall_run_blocking__get__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<std::function<void()> const*>(simcall->args_[0]);
}
static inline std::function<void()> const* simcall_run_blocking__getraw__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<std::function<void()> const*>(simcall->args_[0]);
}
static inline void simcall_run_blocking__set__code(smx_simcall_t simcall, std::function<void()> const* arg)
{
  simgrid::simix::marshal<std::function<void()> const*>(simcall->args_[0], arg);
}

/* The prototype of all simcall handlers, automatically generated for you */
