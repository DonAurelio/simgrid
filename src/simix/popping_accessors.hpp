/**********************************************************************/
/* File generated by src/simix/simcalls.py from src/simix/simcalls.in */
/*                                                                    */
/*                    DO NOT EVER CHANGE THIS FILE                    */
/*                                                                    */
/* change simcalls specification in src/simix/simcalls.in             */
/* Copyright (c) 2014-2022. The SimGrid Team. All rights reserved.    */
/**********************************************************************/

/*
 * Note that the name comes from http://en.wikipedia.org/wiki/Popping
 * Indeed, the control flow is doing a strange dance in there.
 *
 * That's not about http://en.wikipedia.org/wiki/Poop, despite the odor :)
 */

#include "src/simix/popping_private.hpp"
static inline simgrid::kernel::activity::CommImpl** simcall_comm_waitany__get__comms(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<simgrid::kernel::activity::CommImpl**>(simcall->args_[0]);
}
static inline simgrid::kernel::activity::CommImpl** simcall_comm_waitany__getraw__comms(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<simgrid::kernel::activity::CommImpl**>(simcall->args_[0]);
}
static inline void simcall_comm_waitany__set__comms(smx_simcall_t simcall, simgrid::kernel::activity::CommImpl** arg)
{
  simgrid::simix::marshal<simgrid::kernel::activity::CommImpl**>(simcall->args_[0], arg);
}
static inline size_t simcall_comm_waitany__get__count(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<size_t>(simcall->args_[1]);
}
static inline size_t simcall_comm_waitany__getraw__count(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<size_t>(simcall->args_[1]);
}
static inline void simcall_comm_waitany__set__count(smx_simcall_t simcall, size_t arg)
{
  simgrid::simix::marshal<size_t>(simcall->args_[1], arg);
}
static inline double simcall_comm_waitany__get__timeout(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<double>(simcall->args_[2]);
}
static inline double simcall_comm_waitany__getraw__timeout(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<double>(simcall->args_[2]);
}
static inline void simcall_comm_waitany__set__timeout(smx_simcall_t simcall, double arg)
{
  simgrid::simix::marshal<double>(simcall->args_[2], arg);
}
static inline ssize_t simcall_comm_waitany__get__result(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<ssize_t>(simcall->result_);
}
static inline ssize_t simcall_comm_waitany__getraw__result(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<ssize_t>(simcall->result_);
}
static inline void simcall_comm_waitany__set__result(smx_simcall_t simcall, ssize_t result)
{
  simgrid::simix::marshal<ssize_t>(simcall->result_, result);
}

static inline simgrid::kernel::activity::CommImpl* simcall_comm_wait__get__comm(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<simgrid::kernel::activity::CommImpl*>(simcall->args_[0]);
}
static inline simgrid::kernel::activity::CommImpl* simcall_comm_wait__getraw__comm(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<simgrid::kernel::activity::CommImpl*>(simcall->args_[0]);
}
static inline void simcall_comm_wait__set__comm(smx_simcall_t simcall, simgrid::kernel::activity::CommImpl* arg)
{
  simgrid::simix::marshal<simgrid::kernel::activity::CommImpl*>(simcall->args_[0], arg);
}
static inline double simcall_comm_wait__get__timeout(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<double>(simcall->args_[1]);
}
static inline double simcall_comm_wait__getraw__timeout(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<double>(simcall->args_[1]);
}
static inline void simcall_comm_wait__set__timeout(smx_simcall_t simcall, double arg)
{
  simgrid::simix::marshal<double>(simcall->args_[1], arg);
}

static inline std::function<void()> const* simcall_run_kernel__get__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<std::function<void()> const*>(simcall->args_[0]);
}
static inline std::function<void()> const* simcall_run_kernel__getraw__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<std::function<void()> const*>(simcall->args_[0]);
}
static inline void simcall_run_kernel__set__code(smx_simcall_t simcall, std::function<void()> const* arg)
{
  simgrid::simix::marshal<std::function<void()> const*>(simcall->args_[0], arg);
}

static inline std::function<void()> const* simcall_run_blocking__get__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal<std::function<void()> const*>(simcall->args_[0]);
}
static inline std::function<void()> const* simcall_run_blocking__getraw__code(smx_simcall_t simcall)
{
  return simgrid::simix::unmarshal_raw<std::function<void()> const*>(simcall->args_[0]);
}
static inline void simcall_run_blocking__set__code(smx_simcall_t simcall, std::function<void()> const* arg)
{
  simgrid::simix::marshal<std::function<void()> const*>(simcall->args_[0], arg);
}

/* The prototype of all simcall handlers, automatically generated for you */

XBT_PRIVATE void simcall_HANDLER_comm_waitany(smx_simcall_t simcall, simgrid::kernel::activity::CommImpl** comms, size_t count, double timeout);
XBT_PRIVATE void simcall_HANDLER_comm_wait(smx_simcall_t simcall, simgrid::kernel::activity::CommImpl* comm, double timeout);
