**
** Source tree organization
**
******************************************************

 examples/ -> Supposed to be copy/pastable by the user, so keep it clear and
                avoid any kind of trick. In particular, do only include the
                public headers here.

 teshsuite/ -> The more test the better. Put in there any strange test
               doing things that the users are not supposed to do,
               just to see if our framework is robust to incorrect and
               unusual behaviors. All tests written in this section
               should leverage our tesh(1) utility.

**
** Type naming standard in SimGrid4
**
*****************************************************

SimGrid4 will follow the these rules:

  - filenames are unique in the whole project
    (because of a bug in Sonar coverage computation)
  C++
  - fields, methods and variables are in snake_case()
  - Classes and Enum names are in UpperCamelCase
  - Enum values are in UPPER_SNAKE_CASE (as constants)
  - public filenames: api_Class.cpp and api/Class.hpp.
    - Example: src/s4u/s4u_ConditionVariable.cpp and
               include/simgrid/s4u/ConditionVariable.hpp
    - If you prefer api_class.cpp, that's OK, too. Breath and relax.
      Example: src/s4u/s4u_actor.cpp and include/simgrid/s4u/Actor.hpp
  - internal/kernel filenames: Class.cpp and Class.hpp
    - Example: src/kernel/activity/Activity.cpp
               include/simgrid/activity/Activity.hpp
  C
  - Field getters are named sg_object_get_field() e.g. sg_link_get_name()
    Field setters are named sg_object_set_field() e.g. sg_link_set_data()
  - variables and functions are in snake_case()
  - typedefs do not hide the pointers, i.e. * must be explicit
    char* sg_host_get_name(sg_host_t* host);


* SimGrid Hacker Survival Guide (FIXME: should be betterly placed)
********************************
* When you add/remove files, and/or make changes in the lists of files to build,
  please check that "make distcheck" still succeeds.  This is needed to ensure
  that the generated archive is consistent.
